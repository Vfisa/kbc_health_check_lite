import streamlit as stimport datetimeimport loggingimport pandas as pdimport calendarimport plotly.express as pxfrom  utils import utils from utils import ui_elements as uiimport sqlsst.set_page_config(    layout="wide",     page_title="HealthCheck Lite"    )st.markdown("# Projects Overview")st.sidebar.markdown("# Projects Overview")print("######################")print(utils.read_yaml() )# -----------default options---------------------------------------LOGFILE = 'healthcheck.log'start_date = datetime.date(2022, 1, 1)end_date = datetime.date.today() - datetime.timedelta(days=1)#-----------------------------------------------------------------conn = utils.init_connection()utils.execute_statement(sqls.sql_jobs_view, conn)logging.info("recreating the view KBC_JOB_VALID_START")utils.execute_statement(sqls.sql_cluster_key, conn)logging.info("Clustering key has been added to KBC_JOB_VALID_START")sql_jobs_view_filtered = sqls.prepare_sql_start_dates(start_date, end_date)logging.debug(sql_jobs_view_filtered)utils.execute_statement(sql_jobs_view_filtered, conn)logging.info("View KBC_JOB_VALID_START_DATES with date range has been (re-)created")org_df = utils.run_query(sqls.sql_org, conn)logging.info("Organizations have been retrieved from the database")org_df.set_index(org_df.kbc_organization, inplace=True)logging.debug(f"session keys {st.session_state}")# put all widgets in sidebar and have a subtitlewith st.sidebar:    st.subheader("Configure the plot")    organizations = org_df.kbc_organization.values        if 'org_selected' in st.session_state:        org_index = list(organizations).index(st.session_state['org_selected'])    else:        org_index = 0        org_selected = st.selectbox("Select KBC Organization", list(organizations), index=org_index)    st.session_state['org_selected'] = org_selected    logging.debug(f"org selected = {org_selected}")    org_id_selected = org_df.at[org_selected, "kbc_organization_id"]    org_url_selected = org_df.at[org_selected, "kbc_organization_url"]       if  isinstance(org_id_selected, pd.Series):        org_id_selected = org_id_selected[0]        org_url_selected = org_url_selected[0]        logging.warning("Multiple organizations with the same name. The first was selected")    logging.debug(f"session keys 2 {st.session_state}")    projects_df = utils.run_query(sqls.prepare_sql_projects(org_id_selected), conn)    projects_df.reset_index(drop=True, inplace=True)    projects_df.set_index("kbc_project_id", inplace=True)        projects = projects_df.kbc_project.values        # get all project ids for the current organization    selected_project_ids = list(projects_df.loc[projects_df.kbc_project.isin(projects),].index)        project_ids_str = str(list(projects_df.index)).replace('[', '(').replace(']', ')')    st.session_state['project_ids_str'] = project_ids_str    # store the whole dataframe in the memory    usage_breakdown_df0 = utils.run_query(sqls.prepare_sql_breakdown(project_ids_str, start_date, end_date), conn)        st.write('Select Projects for the chosen organization:')        selected_project_ids = ui.add_project_checkboxes(projects, projects_df, org_selected)        col1, col2 = st.columns(2)    with col1:        start_date = st.date_input(         "Select start date",         datetime.date(2022, 1, 1))    with col2:        end_date = st.date_input(         "Select end date",         datetime.date.today() - datetime.timedelta(days=1))    try:        usage_breakdown_df = usage_breakdown_df0.copy().loc[usage_breakdown_df0.kbc_project_id.isin(selected_project_ids)]    usage_breakdown_df["date"] = pd.to_datetime(usage_breakdown_df["date"])        usage_breakdown_df['time_credits_7day_ave'] = usage_breakdown_df.groupby('usage_breakdown')['time_credits_value'].rolling(7,1).mean().reset_index().set_index('level_1')['time_credits_value']    # monthly aggregation    project_usage_df_monthly = usage_breakdown_df.copy()    project_usage_df_monthly.set_index("date", inplace=True)    project_usage_df_monthly["value"] = pd.to_numeric(project_usage_df_monthly.value)    project_usage_df_monthly["time_credits_value"] = pd.to_numeric(project_usage_df_monthly.time_credits_value)    project_usage_df_monthly["run_time_hours"] = pd.to_numeric(project_usage_df_monthly.run_time_hours)    project_usage_df_monthly["jobs"] = pd.to_numeric(project_usage_df_monthly.jobs)    project_usage_df_monthly = project_usage_df_monthly.resample('M').sum()    last_credits, credits_diff = utils.calculate_monthly_change(project_usage_df_monthly, "time_credits_value")    last_runtime, runtime_diff = utils.calculate_monthly_change(project_usage_df_monthly, "run_time_hours")    last_jobs, jobs_diff = utils.calculate_monthly_change(project_usage_df_monthly, "jobs")    try:        last_full_month = calendar.month_name[project_usage_df_monthly.index[-2].month]    except IndexError:        last_full_month = 'NA'            try:        current_year = project_usage_df_monthly.index[-2].year    except IndexError:        current_year = 'NA'    project_usage_df = usage_breakdown_df.groupby(["date", "kbc_project_id"]).agg(project_consumption=('time_credits_7day_ave', 'sum'))    project_usage_df.reset_index(inplace=True)    project_usage_df["Project"] = project_usage_df.kbc_project_id.map(lambda x: projects_df.at[x, "kbc_project"])    # CHARTS FOR USAGE BREAKDOWN    breakdown_area_chart = ui.breakdown_area_chart(project_usage_df, x="date", y="project_consumption", color="Project")    logging.info("Drawing breakdown area chart")    ecdf_chart = ui.ecdf_chart(project_usage_df, x="date", y="project_consumption", color="Project")    logging.info("Drawing breakdown ecdf chart")        with st.expander("KBC Usage Per Project", expanded=True):        st.subheader("KBC Usage Per Project")                chart, metrics = st.columns([5, 1])                with chart:            st.plotly_chart(breakdown_area_chart, use_container_width=False)            st.plotly_chart(ecdf_chart, use_container_width=False)            st.plotly_chart(px.bar(project_usage_df, x="Project", y="project_consumption"))        with metrics:            st.write(f"Overall Stats for Last Full Month ({last_full_month} {current_year}):")            st.metric('Time credits value', last_credits, credits_diff)            st.metric('Total runtime (in hours)', last_runtime, runtime_diff)            st.metric('#jobs', last_jobs, jobs_diff)except KeyError:    with st.expander("KBC Usage Per Project", expanded=True):        st.write("KBC was not used for the selected organization during the defined time period. (or it is BYODB)")try:    scatter_chart = ui.scatter_chart(usage_breakdown_df, x="date", y="time_credits_7day_ave", color='usage_breakdown')    logging.info("Drawing scatterplot chart")        fig_pie = px.pie(usage_breakdown_df, values='time_credits_7day_ave', names='usage_breakdown')    with st.expander("KBC Usage Breakdown", expanded=True):        st.subheader("KBC Usage Breakdown")        st.plotly_chart(scatter_chart, use_container_width=True)        st.write("Overall distribution of components usage")        st.plotly_chart(fig_pie, use_container_width=True)except ValueError:    with st.expander("KBC Usage Breakdown", expanded=True):        st.write("KBC was not used for the selected organization during the defined time period.")